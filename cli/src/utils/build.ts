import * as fs from 'fs';
import * as path from 'path';
import { createBuild, exportBuild, generateDockerfile } from 'reproducible';
import { ValistConfig } from '@valist/sdk/dist/types';
import { defaultImages, parsePackageJson } from './config';

export const buildRelease = async (config : ValistConfig): Promise<fs.ReadStream[]> => {
  let buildCommand = config.build;
  let outArtifact = config.out;

  if (config.type === 'node') {
    const packageJson = parsePackageJson();
    buildCommand = `${config.build} && npm pack`;
    outArtifact = `${packageJson.name}-${packageJson.version}.tgz`;
  }

  // Generate Dockerfile (uses current directory as source)
  generateDockerfile(config.image || defaultImages[config.type], './', buildCommand, config.install);

  await createBuild('valist-build-image');
  await exportBuild('valist-build-image', outArtifact);

  // cleanup docker artifacts generated by reproducible
  if (!process.env.KEEP_DOCKERFILE) {
    fs.unlinkSync('Dockerfile.reproducible');
    fs.unlinkSync('Dockerfile.reproducible.dockerignore');
  }

  const releaseFiles: fs.ReadStream[] = [];

  const artifacts: string[] = Object.values(config.artifacts);
  for (let i = 0; i < artifacts.length; ++i) {
    releaseFiles.push(fs.createReadStream(path.join(process.cwd(), config.out, artifacts[i])));
  }

  // const releaseFile = fs.createReadStream(path.join(process.cwd(), outArtifact));

  return releaseFiles;
};
